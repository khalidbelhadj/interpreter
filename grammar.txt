<program> ::= <struct> | <function> | <struct> <program> | <function> <program>

<struct> ::= <identifier> "struct" "{" <struct-fields> "}"

<struct-fields> ::= <struct-field> <struct-fields> | e
<struct-field> ::= <identifier> <type>

<type> ::= "int" | "void" | "string" | <identifier>  (* Custom types, such as structs, are allowed here *)

<function> ::= <type> <identifier> "(" <parameters> ")" <type> "{" <statements> "}"

<parameters> ::= <parameter> | <parameter> "," <parameters> | e
<parameter> ::= <identifier> <type>

<statements> ::= <statement> <statements> | e

<statement> ::= <declaration> | <assignment> | <if-statement> | <return-statement> | <function-call> ";"

<declaration> ::= "let" <identifier> "=" <expression>
<assignment> ::= <identifier> "=" <expression>
               | <identifier> "." <identifier> "=" <expression> (* For struct field assignment *)

<if-statement> ::= "if" <condition> "{" <statements> "}" "else" "{" <statements> "}"

<return-statement> ::= "return" <expression> ";"

<function-call> ::= <identifier> "(" <arguments> ")"

<arguments> ::= <expression> | <expression> "," <arguments> | e

<condition> ::= <expression> <relational-operator> <expression>
<relational-operator> ::= ">" | "<" | ">=" | "<=" | "==" | "!="

<expression> ::= <term>
               | <term> <add-operator> <expression>
               | <identifier> "." <identifier> (* Access struct field *)
               | <struct-initialization>

<add-operator> ::= "+" | "-"

<term> ::= <factor> | <factor> <mul-operator> <term>
<mul-operator> ::= "*" | "/"

<factor> ::= "!" <factor>
           | <identifier>
           | <literal>
           | "(" <expression> ")"

<struct-initialization> ::= <identifier> "{" <struct-field-initializations> "}"
<struct-field-initializations> ::= <struct-field-initialization> | <struct-field-initialization> "," <struct-field-initializations>
<struct-field-initialization> ::= <identifier> ":" <expression>

<identifier> ::= <letter> <identifier-tail>
<identifier-tail> ::= <letter> | <digit> | "_" <identifier-tail> | e

<literal> ::= <integer-literal> | <string-literal>
<integer-literal> ::= <digit> <integer-tail>
<integer-tail> ::= <digit> <integer-tail> | e

<string-literal> ::= "\"" <string-characters> "\""
<string-characters> ::= <character> <string-characters> | e

<letter> ::= "a" | "b" | "c" | ... | "z" | "A" | "B" | "C" | ... | "Z"
<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
<character> ::= any printable character except '"'
